# equals cpu core
worker_processes  4;

events {
    worker_connections  2048;
}

http {
    # This is required to proxy Grafana Live WebSocket connections.
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # Define the upstream groups
    upstream backend {
        hash $wsid consistent;
        server vvm1;
        server vvm2;
        server vvm3;
        server vvm4;
        server vvm5;
        server vvm6;
    }

    upstream grafana {
        ip_hash;
        server grafana1:3000;
        server grafana2:3000;
    }

    upstream prometheus {
        ip_hash;
        server prometheus1:9090;
        server prometheus2:9090;
    }

    server  {
        listen 80; 
        server_name app-node-01.cdci.voedger.io;

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        location / {
            return 301 https://$host$request_uri;
        }

    }

    server {
        listen 443 ssl;
        server_name app-node-01.cdci.voedger.io;

        ssl_certificate_by_lua_block {
            local ssl = require("ngx.ssl")

            -- Certificate exist?
            local cert_file = "/etc/letsencrypt/live/app-node-01.cdci.voedger.io/fullchain.pem"
            local key_file = "/etc/letsencrypt/live/app-node-01.cdci.voedger.io/privkey.pem"

            local cert = ssl.load_certificate(cert_file)
            local key = ssl.load_private_key(key_file)

            -- If not exist - close connection
            if not cert or not key then
                ngx.log(ngx.ERR, "Certificate or private key not found. Waiting for Certbot.")
                ngx.exit(ngx.ERROR) -- response with error
            end
        }

        ssl_certificate /etc/letsencrypt/live/app-node-01.cdci.voedger.io/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/app-node-01.cdci.voedger.io/privkey.pem;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;


        # Backend location with wsid extraction
        location ~ ^/api/[^/]+/[^/]+/([^/]+)$ {
            set $wsid $1;

            proxy_pass http://backend;
            proxy_set_header X-WSID $wsid;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Grafana location
        location /grafana/ {
            proxy_set_header Host $host;
            proxy_pass http://grafana;
        }
        # Proxy Grafana Live WebSocket connections.
        location /grafana/api/live/ {
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_pass http://grafana;
        }

        # Prometheus location
        location /prometheus {
            proxy_pass http://prometheus;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /static/ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Default location for unmatched requests - return 400 Bad Request
        location / {
            return 400 "Bad Request\n";
        }
    }
}
